import os
import hmac
import hashlib
import json
from urllib.parse import parse_qsl
from operator import itemgetter
import sqlite3
import asyncio

import libsql_experimental as libsql
from fastapi import FastAPI, HTTPException
from aiogram import Bot, Dispatcher, Router, types
import uvicorn

# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL")
DB_TOKEN = os.getenv("DB_TOKEN")

# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–π –±–∞–∑–µ (Turso) —á–µ—Ä–µ–∑ libsql
remote_conn = libsql.connect("miniappbd", sync_url=DB_URL, auth_token=DB_TOKEN)
remote_conn.sync()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ SQL-–∑–∞–ø—Ä–æ—Å–∞–º–∏

# 5. –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
remote_conn.execute("""
    CREATE TABLE IF NOT EXISTS clicks (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        clicks INTEGER DEFAULT 0
    )
""")
remote_conn.commit()

# 6. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite) –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
local_conn = sqlite3.connect("local.db", check_same_thread=False)
local_conn.row_factory = sqlite3.Row
local_cursor = local_conn.cursor()
local_cursor.execute("""
    CREATE TABLE IF NOT EXISTS local_clicks (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        clicks INTEGER DEFAULT 0
    )
""")
local_conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º Telegram WebApp:
def check_webapp_signature(token: str, init_data: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å initData, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç Telegram WebApp.
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1. –†–∞–∑–±–∏—Ä–∞–µ–º init_data –∫–∞–∫ query string.
      2. –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "hash".
      3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "key1=value1\nkey2=value2\n..." 
         (–∫–ª—é—á–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏).
      4. –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ HMAC —Å –∫–ª—é—á–æ–º "WebAppData" –∏ —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.
      5. –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ö—ç—à.
      6. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö—ç—à —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º.
    """
    try:
        parsed_data = dict(parse_qsl(init_data))
    except ValueError:
        return False
    if "hash" not in parsed_data:
        return False
    received_hash = parsed_data.pop("hash")
    data_check_string = "\n".join(
        f"{k}={v}" for k, v in sorted(parsed_data.items(), key=itemgetter(0))
    )
    secret_key = hmac.new(key=b"WebAppData", msg=token.encode(), digestmod=hashlib.sha256)
    calculated_hash = hmac.new(
        key=secret_key.digest(),
        msg=data_check_string.encode(),
        digestmod=hashlib.sha256
    ).hexdigest()
    return calculated_hash == received_hash

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
async def sync_databases():
    """
    –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç:
      - –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ø-100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∫–ª–∏–∫–∞–º) –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.
      - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏ —Å –∫–ª–∏–∫–∞–º–∏ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î.
      - –û—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.
    """
    while True:
        try:
            print("üîÑ [Sync] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î")
            # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ø-100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª–∏–∫–∞–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            local_cursor.execute("SELECT * FROM local_clicks ORDER BY clicks DESC LIMIT 100")
            local_rows = local_cursor.fetchall()
            if not local_rows:
                print("üîÑ [Sync] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            else:
                for row in local_rows:
                    user_id = row["user_id"]
                    username = row["username"]
                    local_clicks = row["clicks"]

                    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    result = remote_conn.execute("SELECT clicks FROM clicks WHERE user_id = ?", (user_id,))
                    remote_row = result.fetchone()
                    if remote_row:
                        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏ –∫ —É–¥–∞–ª—ë–Ω–Ω—ã–º
                        new_clicks = remote_row[0] + local_clicks
                        remote_conn.execute("UPDATE clicks SET clicks = ? WHERE user_id = ?", (new_clicks, user_id))
                    else:
                        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        remote_conn.execute(
                            "INSERT INTO clicks (user_id, username, clicks) VALUES (?, ?, ?)",
                            (user_id, username, local_clicks)
                        )
                remote_conn.commit()

                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–π –ë–î —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                user_ids = [row["user_id"] for row in local_rows]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
                placeholders = ",".join("?" for _ in user_ids)
                local_cursor.execute(f"DELETE FROM local_clicks WHERE user_id IN ({placeholders})", user_ids)
                local_conn.commit()

                print("‚úÖ [Sync] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è", len(user_ids), "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print("‚ùå [Sync] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", e)
        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(600)

# Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.post("/api/auth")
async def auth(data: dict):
    """
    –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–ª—ë—Ç JSON —Å –ø–æ–ª–µ–º "initData",
    —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram.
    """
    init_data = data.get("initData")
    print("üîπ [API] initData:", init_data)
    if not init_data:
        raise HTTPException(status_code=400, detail="Missing initData")
    if not check_webapp_signature(BOT_TOKEN, init_data):
        raise HTTPException(status_code=403, detail="Invalid auth")
    # –†–∞–∑–±–∏—Ä–∞–µ–º initData
    parsed_data = dict(parse_qsl(init_data))
    user_json = parsed_data.get("user")
    if not user_json:
        raise HTTPException(status_code=400, detail="Missing user data")
    try:
        user_obj = json.loads(user_json)
    except Exception as e:
        raise HTTPException(status_code=400, detail="Invalid user data format")
    user_id = int(user_obj["id"])
    username = user_obj.get("username", "Unknown")
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    local_cursor.execute("SELECT clicks FROM local_clicks WHERE user_id = ?", (user_id,))
    row = local_cursor.fetchone()
    if row:
        user_clicks = row["clicks"]
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å 0 –∫–ª–∏–∫–æ–≤
        local_cursor.execute("INSERT INTO local_clicks (user_id, username, clicks) VALUES (?, ?, ?)",
                             (user_id, username, 0))
        local_conn.commit()
        user_clicks = 0
    print(f"‚úÖ [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}), –∫–ª–∏–∫–æ–≤: {user_clicks}")
    return {"user_id": user_id, "clicks": user_clicks}

# Endpoint –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î)
@app.post("/api/click")
async def record_click(data: dict):
    user_id = data["user_id"]
    print(f"üîπ [API] –ü–æ–ª—É—á–µ–Ω –∫–ª–∏–∫ –æ—Ç {user_id}")
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    local_cursor.execute("UPDATE local_clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    if local_cursor.rowcount == 0:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é (—Ö–æ—Ç—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —É–∂–µ –±—ã—Ç—å)
        local_cursor.execute("INSERT INTO local_clicks (user_id, username, clicks) VALUES (?, ?, ?)",
                             (user_id, "Unknown", 1))
    local_conn.commit()
    return {"status": "ok"}

# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î)
@app.get("/api/stats")
async def get_stats():
    print("üîπ [API] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    local_cursor.execute("SELECT username, clicks FROM local_clicks ORDER BY clicks DESC")
    rows = local_cursor.fetchall()
    stats = [{"username": row["username"], "clicks": row["clicks"]} for row in rows]
    return stats

# –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∏–∫–∏ –æ—Ç Mini App (—Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î)
@router.message(lambda message: message.web_app_data is not None)
async def handle_webapp_data(message: types.Message):
    data = json.loads(message.web_app_data.data)
    user_id = message.from_user.id
    print(f"üîπ [Bot] –ö–ª–∏–∫ –æ—Ç {user_id}, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
    local_cursor.execute("UPDATE local_clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    if local_cursor.rowcount == 0:
        local_cursor.execute("INSERT INTO local_clicks (user_id, username, clicks) VALUES (?, ?, ?)",
                             (user_id, "Unknown", 1))
    local_conn.commit()
    await message.answer(f"–í–∞—à–∏ –∫–ª–∏–∫–∏: {data['clicks']}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI + –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def main():
    loop = asyncio.get_event_loop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    sync_task = loop.create_task(sync_databases())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_task = loop.create_task(dp.start_polling(bot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    server_task = loop.create_task(uvicorn.run(app, host="0.0.0.0", port=8000))
    
    await asyncio.gather(sync_task, bot_task, server_task)

if __name__ == "__main__":
    asyncio.run(main())
