import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
import hmac
import hashlib
import json
import libsql_experimental as libsql
from fastapi import FastAPI, HTTPException
from aiogram import Bot, Dispatcher, Router, types
import asyncio

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL")
DB_TOKEN = os.getenv("DB_TOKEN")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Turso
conn = libsql.connect("miniappbd", sync_url=DB_URL, auth_token=DB_TOKEN)
conn.sync()  # üîπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ SQL-–∑–∞–ø—Ä–æ—Å–∞–º–∏

# üîπ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
conn.execute("""
    CREATE TABLE IF NOT EXISTS clicks (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        clicks INTEGER DEFAULT 0
    )
""")
conn.commit()

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram WebApp
def check_telegram_auth(data):
    print("üîπ [Auth] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    secret_key = hashlib.sha256(BOT_TOKEN.encode()).digest()
    received_hash = data.pop("hash", None)

    check_string = "\n".join(f"{k}={v}" for k, v in sorted(data.items()))
    calculated_hash = hmac.new(secret_key, check_string.encode(), hashlib.sha256).hexdigest()

    print("üîπ [Auth] Received Hash:", received_hash)
    print("üîπ [Auth] Calculated Hash:", calculated_hash)

    if received_hash != calculated_hash:
        print("‚ùå [Auth] –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        return False

    print("‚úÖ [Auth] –ü–æ–¥–ø–∏—Å—å Telegram –≤–µ—Ä–Ω–∞!")
    return True

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø–æ–ª—É—á–∞–µ–º user_id)
@app.post("/api/auth")
async def auth(data: dict):
    print("üîπ [API] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

    if not check_telegram_auth(data):
        raise HTTPException(status_code=403, detail="Invalid auth")

    user_id = int(data["id"])
    username = data.get("username", "Unknown")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    result = conn.execute("SELECT clicks FROM clicks WHERE user_id = ?", (user_id,))
    user = result.fetchone()

    user_clicks = user[0] if user else 0

    if not user:
        conn.execute("INSERT INTO clicks (user_id, username, clicks) VALUES (?, ?, ?)", (user_id, username, 0))
        conn.commit()

    print(f"‚úÖ [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}), –∫–ª–∏–∫–æ–≤: {user_clicks}")
    return {"user_id": user_id, "clicks": user_clicks}

# üîπ –ó–∞–ø–∏—Å—å –∫–ª–∏–∫–∞
@app.post("/api/click")
async def record_click(data: dict):
    user_id = data["user_id"]
    print(f"üîπ [API] –ü–æ–ª—É—á–µ–Ω –∫–ª–∏–∫ –æ—Ç {user_id}")

    conn.execute("UPDATE clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

    return {"status": "ok"}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/api/stats")
async def get_stats():
    print("üîπ [API] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    result = conn.execute("SELECT username, clicks FROM clicks ORDER BY clicks DESC").fetchall()
    return [{"username": row[0], "clicks": row[1]} for row in result]

# üîπ –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∏–∫–∏ –æ—Ç Mini App
@router.message(lambda message: message.web_app_data is not None)
async def handle_webapp_data(message: types.Message):
    data = json.loads(message.web_app_data.data)
    user_id = message.from_user.id

    print(f"üîπ [Bot] –ö–ª–∏–∫ –æ—Ç {user_id}, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î")
    conn.execute("UPDATE clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

    await message.answer(f"–í–∞—à–∏ –∫–ª–∏–∫–∏: {data['clicks']}")

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI + –±–æ—Ç–∞
async def main():
    loop = asyncio.get_event_loop()

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI + –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    bot_task = loop.create_task(dp.start_polling(bot))

    import uvicorn
    server_task = loop.create_task(uvicorn.run(app, host="0.0.0.0", port=8000))

    await asyncio.gather(bot_task, server_task)

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
