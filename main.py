import os
import hmac
import hashlib
import json
from urllib.parse import parse_qsl
from operator import itemgetter

import libsql_experimental as libsql
from fastapi import FastAPI, HTTPException
from aiogram import Bot, Dispatcher, Router, types
import asyncio

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL")
DB_TOKEN = os.getenv("DB_TOKEN")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Turso
conn = libsql.connect("miniappbd", sync_url=DB_URL, auth_token=DB_TOKEN)
conn.sync()  # üîπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ SQL-–∑–∞–ø—Ä–æ—Å–∞–º–∏

# üîπ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
conn.execute("""
    CREATE TABLE IF NOT EXISTS clicks (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        clicks INTEGER DEFAULT 0
    )
""")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º Telegram WebApp:
def check_webapp_signature(token: str, init_data: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å initData, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç Telegram WebApp.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1. –†–∞–∑–±–∏—Ä–∞–µ–º init_data –∫–∞–∫ query string.
      2. –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "hash".
      3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "key1=value1\nkey2=value2\n..." 
         (–∫–ª—é—á–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏).
      4. –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ HMAC —Å –∫–ª—é—á–æ–º "WebAppData" –∏ —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.
      5. –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ö—ç—à.
      6. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö—ç—à —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º.
    """
    try:
        parsed_data = dict(parse_qsl(init_data))
    except ValueError:
        # init_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        return False
    if "hash" not in parsed_data:
        return False

    received_hash = parsed_data.pop("hash")
    data_check_string = "\n".join(
        f"{k}={v}" for k, v in sorted(parsed_data.items(), key=itemgetter(0))
    )
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º "WebAppData" (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    secret_key = hmac.new(key=b"WebAppData", msg=token.encode(), digestmod=hashlib.sha256)
    calculated_hash = hmac.new(
        key=secret_key.digest(),
        msg=data_check_string.encode(),
        digestmod=hashlib.sha256
    ).hexdigest()
    return calculated_hash == received_hash

# Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.post("/api/auth")
async def auth(data: dict):
    """
    –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–ª—ë—Ç JSON —Å –ø–æ–ª–µ–º "initData",
    —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram.
    """
    init_data = data.get("initData")
    print("üîπ [API] initData:", init_data)
    if not init_data:
        raise HTTPException(status_code=400, detail="Missing initData")
    
    if not check_webapp_signature(BOT_TOKEN, init_data):
        raise HTTPException(status_code=403, detail="Invalid auth")
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, —Ä–∞–∑–±–∏—Ä–∞–µ–º initData –≤ —Å–ª–æ–≤–∞—Ä—å
    parsed_data = dict(parse_qsl(init_data))
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ "user" ‚Äî –æ–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è JSON-—Å—Ç—Ä–æ–∫–∞
    user_json = parsed_data.get("user")
    if not user_json:
        raise HTTPException(status_code=400, detail="Missing user data")
    try:
        user_obj = json.loads(user_json)
    except Exception as e:
        raise HTTPException(status_code=400, detail="Invalid user data format")
    
    user_id = int(user_obj["id"])
    username = user_obj.get("username", "Unknown")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    result = conn.execute("SELECT clicks FROM clicks WHERE user_id = ?", (user_id,))
    user = result.fetchone()
    user_clicks = user[0] if user else 0
    
    if not user:
        conn.execute("INSERT INTO clicks (user_id, username, clicks) VALUES (?, ?, ?)",
                     (user_id, username, 0))
        conn.commit()
    
    print(f"‚úÖ [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}), –∫–ª–∏–∫–æ–≤: {user_clicks}")
    return {"user_id": user_id, "clicks": user_clicks}

# üîπ –ó–∞–ø–∏—Å—å –∫–ª–∏–∫–∞
@app.post("/api/click")
async def record_click(data: dict):
    user_id = data["user_id"]
    print(f"üîπ [API] –ü–æ–ª—É—á–µ–Ω –∫–ª–∏–∫ –æ—Ç {user_id}")

    conn.execute("UPDATE clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

    return {"status": "ok"}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/api/stats")
async def get_stats():
    print("üîπ [API] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    result = conn.execute("SELECT username, clicks FROM clicks ORDER BY clicks DESC").fetchall()
    return [{"username": row[0], "clicks": row[1]} for row in result]

# üîπ –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∏–∫–∏ –æ—Ç Mini App
@router.message(lambda message: message.web_app_data is not None)
async def handle_webapp_data(message: types.Message):
    data = json.loads(message.web_app_data.data)
    user_id = message.from_user.id

    print(f"üîπ [Bot] –ö–ª–∏–∫ –æ—Ç {user_id}, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î")
    conn.execute("UPDATE clicks SET clicks = clicks + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

    await message.answer(f"–í–∞—à–∏ –∫–ª–∏–∫–∏: {data['clicks']}")

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI + –±–æ—Ç–∞
async def main():
    loop = asyncio.get_event_loop()

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI + –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    bot_task = loop.create_task(dp.start_polling(bot))

    import uvicorn
    server_task = loop.create_task(uvicorn.run(app, host="0.0.0.0", port=8000))

    await asyncio.gather(bot_task, server_task)

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
